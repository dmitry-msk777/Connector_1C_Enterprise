name: To GitLab(registry.gitlab.com)

on:
  push:
    branches: [ CD-CI ]
  pull_request:
    branches: [ CD-CI ]

env:
  # TODO: Change variable to your image's name
  IMAGE_NAME: go-example-sqlquerybuilder
  GOOS: linux
  GOARCH: amd64
  CGO_ENABLED: 0

jobs:

  build:
    name: Build_and_push_gitlab_registry
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
        #goos: linux
        #goarch: amd64
      env:
        goos: linux
        goarch: amd64
        CGO_ENABLED: 0 

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    - name: Build
      env:
        goos: linux
        goarch: amd64
        CGO_ENABLED: 0
      #run: go build -v ./...
      run: |
        echo $GOOS
        echo $GOARCH
        GOOS=linux
        echo ${GITHUB_SHA}
        GOARCH=amd64
        CGO_ENABLED=0
        # CGO_GOARCH=amd64ENABLED=0
        go build -v -ldflags="-X '${IMAGE_NAME}/version.Commit=${GITHUB_SHA}' -X '${IMAGE_NAME}/version.BuildTime=$(date +'%Y-%m-%dT%H:%M:%S')'" -o ${IMAGE_NAME}-linux64
        # go build -o ${IMAGE_NAME}-linux64
        echo ${IMAGE_NAME}
        echo ${IMAGE_NAME}-linux64
        echo $GOOS
        echo $GOARCH
      
    - name: Build image
      run: docker build . --file Dockerfile --tag latest
        
    - name: Login to GitLab Container Registry
      uses: docker/login-action@v1
      with:
        registry: registry.gitlab.com
        username: ${{ secrets.GITLAB_USERNAME }}
        password: ${{ secrets.GITLAB_PASSWORD }}
        
    - name: Push image
      run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo VERSION=$VERSION
          docker tag latest registry.gitlab.com/smartaccount/backend-stack/registriesimagestore/$IMAGE_NAME:$VERSION
          docker push registry.gitlab.com/smartaccount/backend-stack/registriesimagestore/$IMAGE_NAME:$VERSION
          echo $IMAGE_NAME:$VERSION

    - name: Step 1 - Create a temporary artifact downloads folder
      run: |
        mkdir imageDoker
        cp ${IMAGE_NAME}-linux64 imageDoker
        cd imageDoker
        ls
      
    - name: Step 3 - Use the Upload Artifact GitHub Action
      uses: actions/upload-artifact@v2
      with: 
        name: imageDoker-art
        path: imageDoker


  # Push image to GitHub Packages...
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2
      
      - name: Step 1 - Create a temporary artifact downloads folder
        run: mkdir imageDoker

      - name: Download math result for job 1
        uses: actions/download-artifact@v2
        with: 
          name: imageDoker-art
          path: imageDoker
          
      - name: Step 1 - Create a temporary artifact downloads folder
        run: |
          cd imageDoker
          ls
          cd ..
          cp imageDoker/${IMAGE_NAME}-linux64 ${IMAGE_NAME}-linux64
          # mkdir imageDoker
          # cp ${IMAGE_NAME}-linux64 imageDoker
          # При копировании из артефакта в новый этап, файл теряет метки как исполняемый, восстановим этот режим
          chmod +x ${IMAGE_NAME}-linux64
          
      - name: Build image
        # run: docker build . --file Dockerfile --tag grpc_example
        run: docker build . --file Dockerfile --tag latest

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: docker tag image to GitHub
        run: docker tag test_tag ghcr.io/dmitry-msk777/connector_1c_enterprise/go-example-sqlquerybuilder:test_tag
      
      - name: Push image to GitHub
        run: docker push ghcr.io/dmitry-msk777/connector_1c_enterprise/go-example-sqlquerybuilder:test_tag

# TODO: Дополнительно Адаптировать код ниже при разных ветках и развертывания аналогичных меток
#- name: Push image
#        run: |
#          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
#          # Change all uppercase to lowercase
#          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#          # Strip git ref prefix from version
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#          # Strip "v" prefix from tag name
#          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#          # Use Docker `latest` tag convention
#          [ "$VERSION" == "master" ] && VERSION=latest
#          echo IMAGE_ID=$IMAGE_ID
#          echo VERSION=$VERSION
#          echo docker tag = $IMAGE_NAME $IMAGE_ID:$VERSION
#          echo docker push = $IMAGE_ID:$VERSION
#          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
#          docker push $IMAGE_ID:$VERSION
