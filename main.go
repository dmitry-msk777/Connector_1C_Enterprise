package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "github.com/lib/pq"

	"github.com/gin-gonic/gin"

	"sqlquerybuilder/handlers"
	log "sqlquerybuilder/log"
	"sqlquerybuilder/secure"

	sentrygin "github.com/getsentry/sentry-go/gin"

	"github.com/joho/godotenv"

	logStandart "log"

	"sqlquerybuilder/config"
	"sqlquerybuilder/docs" // docs is generated by Swag CLI, you have to import it.
	"sqlquerybuilder/store"

	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// init is invoked before main()
func init() {
	// loads values from .env into the system
	if err := godotenv.Load(); err != nil {
		//if err := godotenv.Overload(); err != nil {
		logStandart.Print("Отсутствует конфигурационный файл .env")
	}
}

// @title Swagger API Connector for 1C Enterprise
// @version 1.0

// @description API description
// @termsOfService http://swagger.io/terms/

// @contact.name Dmitry
// @contact.url https://github.com/dmitry-msk777/Connector_1C_Enterprise

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /v2
func main() {

	conf := config.New()

	log.InitLog(conf)
	log.Impl.Info("Приложение запущено")

	err := store.InitBD()
	if err != nil {
		log.Impl.Error(err)
	}

	store.ExampleData()

	// TODO: Удалить после тестирования
	log.Impl.Error("Запуск приложения, проверка доступности Sentry")

	// programmatically set swagger info
	docs.SwaggerInfo.Title = "Swagger Example API"
	docs.SwaggerInfo.Description = "This is a sample server Petstore server."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "petstore.swagger.io"
	docs.SwaggerInfo.BasePath = "/v2"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	router := gin.Default()

	// Once it's done, you can attach the handler as one of your middleware
	router.Use(sentrygin.New(sentrygin.Options{}))

	//router.Use(secure.GetMiddleWareForGin())

	router.GET("/foo", func(ctx *gin.Context) {
		panic("Error Occured")
	})

	//v1 := router.Group(conf.MessagePath)
	v1 := router.Group("/")
	v1.Use(secure.GetMiddleWareForGin())
	{
		v1.GET("getdescription/:TableName", handlers.GetDescription)

		v1.GET("getcounttable/:TableName", handlers.GetCountTable)
		v1.GET("cleartable/:TableName", handlers.ClearTable)

		//v1.GET("ping", handlers.Ping)
	}

	router.GET("stresstesting", handlers.StressTesting)

	router.GET("ping", handlers.Ping)
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	//router.Run(":" + conf.Port)

	srv := &http.Server{
		Addr:    ":" + conf.Port,
		Handler: router,
	}

	go func() {
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Impl.Error("listen: %s\n", err.Error())
		}
	}()

	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	<-done
	log.Impl.Info("Завершение приложения (Shutting signal)")

	// The context is used to inform the server it has 5 seconds to finish
	// the request it is currently handling
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Impl.Error("Server forced to shutdown:", err.Error())
	}

	store.DB.Close()

	log.Impl.Info("Приложение завершено (Shutting signal)")

}
